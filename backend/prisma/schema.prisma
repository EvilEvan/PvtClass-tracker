// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  role      String   @default("TEACHER")
  password  String?
  passwordChanged Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacherSessions Session[] @relation("TeacherSessions")
  assignedStudents Student[] @relation("AssignedStudents")

  @@map("users")
}

model Student {
  id               String   @id @default(cuid())
  firstName        String
  lastName         String
  email            String   @unique
  phone            String
  dateOfBirth      String
  enrollmentDate   String
  status           String   @default("active")
  subjects         String   // JSON string array
  notes            String?
  emergencyContactName String
  emergencyContactPhone String
  emergencyContactRelationship String
  addressStreet    String
  addressCity      String
  addressState     String
  addressZipCode   String
  assignedTeacherId String?
  assignedTeacher  User?    @relation("AssignedStudents", fields: [assignedTeacherId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  sessions    Session[]

  @@map("students")
}

model Classroom {
  id          String   @id @default(cuid())
  name        String   @unique
  capacity    Int
  location    String
  equipment   String   // JSON string array
  status      String   @default("available")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sessions    Session[]

  @@map("classrooms")
}

model Session {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      String    @default("SCHEDULED")
  teacherConfirmed Boolean @default(false)
  teacherNotes String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  studentId   String
  student     Student   @relation(fields: [studentId], references: [id])
  teacherId   String
  teacher     User      @relation("TeacherSessions", fields: [teacherId], references: [id])
  classroomId String?
  classroom   Classroom? @relation(fields: [classroomId], references: [id])

  @@map("sessions")
}
