// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model School {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
  students Student[]
  classrooms Classroom[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  role      String   @default("TEACHER")
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String

  teacherSessions Session[] @relation("TeacherSessions")
  assignedStudents Student[] @relation("AssignedStudents")

  @@map("users")
}

model Student {
  id               String   @id @default(cuid())
  firstName        String
  lastName         String
  email            String   @unique
  phone            String
  dateOfBirth      String
  enrollmentDate   String
  status           String   @default("active")
  subjects         String   // JSON string array
  notes            String?
  emergencyContactName String
  emergencyContactPhone String
  emergencyContactRelationship String
  addressStreet    String
  addressCity      String
  addressState     String
  addressZipCode   String
  assignedTeacherId String?
  assignedTeacher  User?    @relation("AssignedStudents", fields: [assignedTeacherId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  school      School     @relation(fields: [schoolId], references: [id])
  schoolId    String
  sessions    Session[]

  @@map("students")
}

model Classroom {
  id          String   @id @default(cuid())
  name        String   @unique
  capacity    Int
  location    String
  equipment   String   // JSON string array
  status      String   @default("available")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  sessions    Session[]
  usageReports ClassroomUsageReport[]

  @@map("classrooms")
}

model ClassroomUsageReport {
  id            String   @id @default(cuid())
  classroomId   String
  classroom     Classroom @relation(fields: [classroomId], references: [id])
  sessionId     String?
  studentName   String
  subject       String
  startTime     String
  endTime       String?
  status        String   @default("active")
  reportedBy    String
  reportedAt    String
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("classroom_usage_reports")
}

model Session {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      String    @default("SCHEDULED")
  teacherConfirmed Boolean @default(false)
  teacherNotes String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  studentId   String
  student     Student   @relation(fields: [studentId], references: [id])
  teacherId   String
  teacher     User      @relation("TeacherSessions", fields: [teacherId], references: [id])
  classroomId String?
  classroom   Classroom? @relation(fields: [classroomId], references: [id])

  @@map("sessions")
}
